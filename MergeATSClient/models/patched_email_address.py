# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class PatchedEmailAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'value': 'str',
        'email_address_type': 'EmailAddressTypeEnum'
    }

    attribute_map = {
        'value': 'value',
        'email_address_type': 'email_address_type'
    }

    def __init__(self, value=None, email_address_type=None, local_vars_configuration=None):  # noqa: E501
        """PatchedEmailAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._value = None
        self._email_address_type = None
        self.discriminator = None

        self.value = value
        self.email_address_type = email_address_type

    @property
    def value(self):
        """Gets the value of this PatchedEmailAddress.  # noqa: E501

        The email's address.  # noqa: E501

        :return: The value of this PatchedEmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PatchedEmailAddress.

        The email's address.  # noqa: E501

        :param value: The value of this PatchedEmailAddress.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                value is not None and len(value) > 254):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `254`")  # noqa: E501

        self._value = value

    @property
    def email_address_type(self):
        """Gets the email_address_type of this PatchedEmailAddress.  # noqa: E501

        The type of email address.  # noqa: E501

        :return: The email_address_type of this PatchedEmailAddress.  # noqa: E501
        :rtype: EmailAddressTypeEnum
        """
        return self._email_address_type

    @email_address_type.setter
    def email_address_type(self, email_address_type):
        """Sets the email_address_type of this PatchedEmailAddress.

        The type of email address.  # noqa: E501

        :param email_address_type: The email_address_type of this PatchedEmailAddress.  # noqa: E501
        :type: EmailAddressTypeEnum
        """

        self._email_address_type = email_address_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedEmailAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedEmailAddress):
            return True

        return self.to_dict() != other.to_dict()
