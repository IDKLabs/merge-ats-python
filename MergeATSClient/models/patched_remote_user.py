# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class PatchedRemoteUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'disabled': 'bool',
        'remote_created_at': 'datetime',
        'access_role': 'AccessRoleEnum'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'disabled': 'disabled',
        'remote_created_at': 'remote_created_at',
        'access_role': 'access_role'
    }

    def __init__(self, id=None, remote_id=None, first_name=None, last_name=None, email=None, disabled=None, remote_created_at=None, access_role=None, local_vars_configuration=None):  # noqa: E501
        """PatchedRemoteUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._disabled = None
        self._remote_created_at = None
        self._access_role = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.disabled = disabled
        self.remote_created_at = remote_created_at
        self.access_role = access_role

    @property
    def id(self):
        """Gets the id of this PatchedRemoteUser.  # noqa: E501


        :return: The id of this PatchedRemoteUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchedRemoteUser.


        :param id: The id of this PatchedRemoteUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this PatchedRemoteUser.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this PatchedRemoteUser.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PatchedRemoteUser.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this PatchedRemoteUser.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def first_name(self):
        """Gets the first_name of this PatchedRemoteUser.  # noqa: E501

        The user's first name.  # noqa: E501

        :return: The first_name of this PatchedRemoteUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PatchedRemoteUser.

        The user's first name.  # noqa: E501

        :param first_name: The first_name of this PatchedRemoteUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PatchedRemoteUser.  # noqa: E501

        The user's last name.  # noqa: E501

        :return: The last_name of this PatchedRemoteUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PatchedRemoteUser.

        The user's last name.  # noqa: E501

        :param last_name: The last_name of this PatchedRemoteUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this PatchedRemoteUser.  # noqa: E501

        The user's email.  # noqa: E501

        :return: The email of this PatchedRemoteUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PatchedRemoteUser.

        The user's email.  # noqa: E501

        :param email: The email of this PatchedRemoteUser.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def disabled(self):
        """Gets the disabled of this PatchedRemoteUser.  # noqa: E501

        Whether the user's account had been disabled.  # noqa: E501

        :return: The disabled of this PatchedRemoteUser.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this PatchedRemoteUser.

        Whether the user's account had been disabled.  # noqa: E501

        :param disabled: The disabled of this PatchedRemoteUser.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this PatchedRemoteUser.  # noqa: E501

        When the third party's user was created.  # noqa: E501

        :return: The remote_created_at of this PatchedRemoteUser.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this PatchedRemoteUser.

        When the third party's user was created.  # noqa: E501

        :param remote_created_at: The remote_created_at of this PatchedRemoteUser.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def access_role(self):
        """Gets the access_role of this PatchedRemoteUser.  # noqa: E501

        The user's role.  # noqa: E501

        :return: The access_role of this PatchedRemoteUser.  # noqa: E501
        :rtype: AccessRoleEnum
        """
        return self._access_role

    @access_role.setter
    def access_role(self, access_role):
        """Sets the access_role of this PatchedRemoteUser.

        The user's role.  # noqa: E501

        :param access_role: The access_role of this PatchedRemoteUser.  # noqa: E501
        :type: AccessRoleEnum
        """

        self._access_role = access_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedRemoteUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedRemoteUser):
            return True

        return self.to_dict() != other.to_dict()
