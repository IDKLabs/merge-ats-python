# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'name': 'str',
        'status': 'JobStatusEnum',
        'remote_created_at': 'datetime',
        'remote_updated_at': 'datetime',
        'confidential': 'bool',
        'departments': 'list[str]',
        'offices': 'list[str]',
        'hiring_managers': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'name': 'name',
        'status': 'status',
        'remote_created_at': 'remote_created_at',
        'remote_updated_at': 'remote_updated_at',
        'confidential': 'confidential',
        'departments': 'departments',
        'offices': 'offices',
        'hiring_managers': 'hiring_managers'
    }

    def __init__(self, id=None, remote_id=None, name=None, status=None, remote_created_at=None, remote_updated_at=None, confidential=None, departments=None, offices=None, hiring_managers=None, local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._name = None
        self._status = None
        self._remote_created_at = None
        self._remote_updated_at = None
        self._confidential = None
        self._departments = None
        self._offices = None
        self._hiring_managers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.name = name
        self.status = status
        self.remote_created_at = remote_created_at
        self.remote_updated_at = remote_updated_at
        self.confidential = confidential
        if departments is not None:
            self.departments = departments
        if offices is not None:
            self.offices = offices
        if hiring_managers is not None:
            self.hiring_managers = hiring_managers

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this Job.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this Job.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this Job.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        The job's name.  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The job's name.  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501

        The job's status.  # noqa: E501

        :return: The status of this Job.  # noqa: E501
        :rtype: JobStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        The job's status.  # noqa: E501

        :param status: The status of this Job.  # noqa: E501
        :type: JobStatusEnum
        """

        self._status = status

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this Job.  # noqa: E501

        When the third party's job was created.  # noqa: E501

        :return: The remote_created_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this Job.

        When the third party's job was created.  # noqa: E501

        :param remote_created_at: The remote_created_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def remote_updated_at(self):
        """Gets the remote_updated_at of this Job.  # noqa: E501

        When the third party's job was updated.  # noqa: E501

        :return: The remote_updated_at of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_updated_at

    @remote_updated_at.setter
    def remote_updated_at(self, remote_updated_at):
        """Sets the remote_updated_at of this Job.

        When the third party's job was updated.  # noqa: E501

        :param remote_updated_at: The remote_updated_at of this Job.  # noqa: E501
        :type: datetime
        """

        self._remote_updated_at = remote_updated_at

    @property
    def confidential(self):
        """Gets the confidential of this Job.  # noqa: E501

        Whether the job is confidential.  # noqa: E501

        :return: The confidential of this Job.  # noqa: E501
        :rtype: bool
        """
        return self._confidential

    @confidential.setter
    def confidential(self, confidential):
        """Sets the confidential of this Job.

        Whether the job is confidential.  # noqa: E501

        :param confidential: The confidential of this Job.  # noqa: E501
        :type: bool
        """

        self._confidential = confidential

    @property
    def departments(self):
        """Gets the departments of this Job.  # noqa: E501


        :return: The departments of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._departments

    @departments.setter
    def departments(self, departments):
        """Sets the departments of this Job.


        :param departments: The departments of this Job.  # noqa: E501
        :type: list[str]
        """

        self._departments = departments

    @property
    def offices(self):
        """Gets the offices of this Job.  # noqa: E501


        :return: The offices of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._offices

    @offices.setter
    def offices(self, offices):
        """Sets the offices of this Job.


        :param offices: The offices of this Job.  # noqa: E501
        :type: list[str]
        """

        self._offices = offices

    @property
    def hiring_managers(self):
        """Gets the hiring_managers of this Job.  # noqa: E501


        :return: The hiring_managers of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._hiring_managers

    @hiring_managers.setter
    def hiring_managers(self, hiring_managers):
        """Sets the hiring_managers of this Job.


        :param hiring_managers: The hiring_managers of this Job.  # noqa: E501
        :type: list[str]
        """

        self._hiring_managers = hiring_managers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
