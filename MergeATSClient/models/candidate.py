# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class Candidate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'company': 'str',
        'title': 'str',
        'remote_created_at': 'datetime',
        'remote_updated_at': 'datetime',
        'last_interaction_at': 'datetime',
        'is_private': 'bool',
        'can_email': 'bool',
        'locations': 'list[str]',
        'phone_numbers': 'list[PhoneNumber]',
        'email_addresses': 'list[EmailAddress]',
        'urls': 'list[Url]',
        'tags': 'list[Tag]',
        'applications': 'list[str]',
        'attachments': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'company': 'company',
        'title': 'title',
        'remote_created_at': 'remote_created_at',
        'remote_updated_at': 'remote_updated_at',
        'last_interaction_at': 'last_interaction_at',
        'is_private': 'is_private',
        'can_email': 'can_email',
        'locations': 'locations',
        'phone_numbers': 'phone_numbers',
        'email_addresses': 'email_addresses',
        'urls': 'urls',
        'tags': 'tags',
        'applications': 'applications',
        'attachments': 'attachments'
    }

    def __init__(self, id=None, remote_id=None, first_name=None, last_name=None, company=None, title=None, remote_created_at=None, remote_updated_at=None, last_interaction_at=None, is_private=None, can_email=None, locations=None, phone_numbers=None, email_addresses=None, urls=None, tags=None, applications=None, attachments=None, local_vars_configuration=None):  # noqa: E501
        """Candidate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._first_name = None
        self._last_name = None
        self._company = None
        self._title = None
        self._remote_created_at = None
        self._remote_updated_at = None
        self._last_interaction_at = None
        self._is_private = None
        self._can_email = None
        self._locations = None
        self._phone_numbers = None
        self._email_addresses = None
        self._urls = None
        self._tags = None
        self._applications = None
        self._attachments = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.first_name = first_name
        self.last_name = last_name
        self.company = company
        self.title = title
        self.remote_created_at = remote_created_at
        self.remote_updated_at = remote_updated_at
        self.last_interaction_at = last_interaction_at
        self.is_private = is_private
        self.can_email = can_email
        self.locations = locations
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if urls is not None:
            self.urls = urls
        if tags is not None:
            self.tags = tags
        if applications is not None:
            self.applications = applications
        if attachments is not None:
            self.attachments = attachments

    @property
    def id(self):
        """Gets the id of this Candidate.  # noqa: E501


        :return: The id of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Candidate.


        :param id: The id of this Candidate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this Candidate.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this Candidate.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this Candidate.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def first_name(self):
        """Gets the first_name of this Candidate.  # noqa: E501

        The user's first name.  # noqa: E501

        :return: The first_name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Candidate.

        The user's first name.  # noqa: E501

        :param first_name: The first_name of this Candidate.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Candidate.  # noqa: E501

        The user's last name.  # noqa: E501

        :return: The last_name of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Candidate.

        The user's last name.  # noqa: E501

        :param last_name: The last_name of this Candidate.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company(self):
        """Gets the company of this Candidate.  # noqa: E501

        The candidate's current company.  # noqa: E501

        :return: The company of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Candidate.

        The candidate's current company.  # noqa: E501

        :param company: The company of this Candidate.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this Candidate.  # noqa: E501

        The candidate's current title.  # noqa: E501

        :return: The title of this Candidate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Candidate.

        The candidate's current title.  # noqa: E501

        :param title: The title of this Candidate.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this Candidate.  # noqa: E501

        When the third party's candidate was created.  # noqa: E501

        :return: The remote_created_at of this Candidate.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this Candidate.

        When the third party's candidate was created.  # noqa: E501

        :param remote_created_at: The remote_created_at of this Candidate.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def remote_updated_at(self):
        """Gets the remote_updated_at of this Candidate.  # noqa: E501

        When the third party's candidate was updated.  # noqa: E501

        :return: The remote_updated_at of this Candidate.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_updated_at

    @remote_updated_at.setter
    def remote_updated_at(self, remote_updated_at):
        """Sets the remote_updated_at of this Candidate.

        When the third party's candidate was updated.  # noqa: E501

        :param remote_updated_at: The remote_updated_at of this Candidate.  # noqa: E501
        :type: datetime
        """

        self._remote_updated_at = remote_updated_at

    @property
    def last_interaction_at(self):
        """Gets the last_interaction_at of this Candidate.  # noqa: E501

        When the most recent candidate interaction occurred.  # noqa: E501

        :return: The last_interaction_at of this Candidate.  # noqa: E501
        :rtype: datetime
        """
        return self._last_interaction_at

    @last_interaction_at.setter
    def last_interaction_at(self, last_interaction_at):
        """Sets the last_interaction_at of this Candidate.

        When the most recent candidate interaction occurred.  # noqa: E501

        :param last_interaction_at: The last_interaction_at of this Candidate.  # noqa: E501
        :type: datetime
        """

        self._last_interaction_at = last_interaction_at

    @property
    def is_private(self):
        """Gets the is_private of this Candidate.  # noqa: E501

        Whether or not the candidate is private.  # noqa: E501

        :return: The is_private of this Candidate.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Candidate.

        Whether or not the candidate is private.  # noqa: E501

        :param is_private: The is_private of this Candidate.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def can_email(self):
        """Gets the can_email of this Candidate.  # noqa: E501

        Whether or not the candidate can be emailed.  # noqa: E501

        :return: The can_email of this Candidate.  # noqa: E501
        :rtype: bool
        """
        return self._can_email

    @can_email.setter
    def can_email(self, can_email):
        """Sets the can_email of this Candidate.

        Whether or not the candidate can be emailed.  # noqa: E501

        :param can_email: The can_email of this Candidate.  # noqa: E501
        :type: bool
        """

        self._can_email = can_email

    @property
    def locations(self):
        """Gets the locations of this Candidate.  # noqa: E501


        :return: The locations of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Candidate.


        :param locations: The locations of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._locations = locations

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Candidate.  # noqa: E501


        :return: The phone_numbers of this Candidate.  # noqa: E501
        :rtype: list[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Candidate.


        :param phone_numbers: The phone_numbers of this Candidate.  # noqa: E501
        :type: list[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Candidate.  # noqa: E501


        :return: The email_addresses of this Candidate.  # noqa: E501
        :rtype: list[EmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Candidate.


        :param email_addresses: The email_addresses of this Candidate.  # noqa: E501
        :type: list[EmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def urls(self):
        """Gets the urls of this Candidate.  # noqa: E501


        :return: The urls of this Candidate.  # noqa: E501
        :rtype: list[Url]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Candidate.


        :param urls: The urls of this Candidate.  # noqa: E501
        :type: list[Url]
        """

        self._urls = urls

    @property
    def tags(self):
        """Gets the tags of this Candidate.  # noqa: E501


        :return: The tags of this Candidate.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Candidate.


        :param tags: The tags of this Candidate.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def applications(self):
        """Gets the applications of this Candidate.  # noqa: E501


        :return: The applications of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this Candidate.


        :param applications: The applications of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._applications = applications

    @property
    def attachments(self):
        """Gets the attachments of this Candidate.  # noqa: E501


        :return: The attachments of this Candidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Candidate.


        :param attachments: The attachments of this Candidate.  # noqa: E501
        :type: list[str]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Candidate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Candidate):
            return True

        return self.to_dict() != other.to_dict()
