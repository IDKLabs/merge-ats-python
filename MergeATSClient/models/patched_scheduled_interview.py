# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class PatchedScheduledInterview(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'application': 'str',
        'organizer': 'str',
        'interviewers': 'list[str]',
        'location': 'str',
        'start_at': 'datetime',
        'end_at': 'datetime',
        'remote_created_at': 'datetime',
        'remote_updated_at': 'datetime',
        'status': 'ScheduledInterviewStatusEnum'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'application': 'application',
        'organizer': 'organizer',
        'interviewers': 'interviewers',
        'location': 'location',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'remote_created_at': 'remote_created_at',
        'remote_updated_at': 'remote_updated_at',
        'status': 'status'
    }

    def __init__(self, id=None, remote_id=None, application=None, organizer=None, interviewers=None, location=None, start_at=None, end_at=None, remote_created_at=None, remote_updated_at=None, status=None, local_vars_configuration=None):  # noqa: E501
        """PatchedScheduledInterview - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._application = None
        self._organizer = None
        self._interviewers = None
        self._location = None
        self._start_at = None
        self._end_at = None
        self._remote_created_at = None
        self._remote_updated_at = None
        self._status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.application = application
        self.organizer = organizer
        if interviewers is not None:
            self.interviewers = interviewers
        self.location = location
        self.start_at = start_at
        self.end_at = end_at
        self.remote_created_at = remote_created_at
        self.remote_updated_at = remote_updated_at
        self.status = status

    @property
    def id(self):
        """Gets the id of this PatchedScheduledInterview.  # noqa: E501


        :return: The id of this PatchedScheduledInterview.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchedScheduledInterview.


        :param id: The id of this PatchedScheduledInterview.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this PatchedScheduledInterview.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this PatchedScheduledInterview.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PatchedScheduledInterview.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this PatchedScheduledInterview.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def application(self):
        """Gets the application of this PatchedScheduledInterview.  # noqa: E501

        The application being interviewed.  # noqa: E501

        :return: The application of this PatchedScheduledInterview.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this PatchedScheduledInterview.

        The application being interviewed.  # noqa: E501

        :param application: The application of this PatchedScheduledInterview.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def organizer(self):
        """Gets the organizer of this PatchedScheduledInterview.  # noqa: E501

        The user organizing the interview.  # noqa: E501

        :return: The organizer of this PatchedScheduledInterview.  # noqa: E501
        :rtype: str
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this PatchedScheduledInterview.

        The user organizing the interview.  # noqa: E501

        :param organizer: The organizer of this PatchedScheduledInterview.  # noqa: E501
        :type: str
        """

        self._organizer = organizer

    @property
    def interviewers(self):
        """Gets the interviewers of this PatchedScheduledInterview.  # noqa: E501


        :return: The interviewers of this PatchedScheduledInterview.  # noqa: E501
        :rtype: list[str]
        """
        return self._interviewers

    @interviewers.setter
    def interviewers(self, interviewers):
        """Sets the interviewers of this PatchedScheduledInterview.


        :param interviewers: The interviewers of this PatchedScheduledInterview.  # noqa: E501
        :type: list[str]
        """

        self._interviewers = interviewers

    @property
    def location(self):
        """Gets the location of this PatchedScheduledInterview.  # noqa: E501

        The interview's location.  # noqa: E501

        :return: The location of this PatchedScheduledInterview.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PatchedScheduledInterview.

        The interview's location.  # noqa: E501

        :param location: The location of this PatchedScheduledInterview.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def start_at(self):
        """Gets the start_at of this PatchedScheduledInterview.  # noqa: E501

        When the interview was started.  # noqa: E501

        :return: The start_at of this PatchedScheduledInterview.  # noqa: E501
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this PatchedScheduledInterview.

        When the interview was started.  # noqa: E501

        :param start_at: The start_at of this PatchedScheduledInterview.  # noqa: E501
        :type: datetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this PatchedScheduledInterview.  # noqa: E501

        When the interview was ended.  # noqa: E501

        :return: The end_at of this PatchedScheduledInterview.  # noqa: E501
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this PatchedScheduledInterview.

        When the interview was ended.  # noqa: E501

        :param end_at: The end_at of this PatchedScheduledInterview.  # noqa: E501
        :type: datetime
        """

        self._end_at = end_at

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this PatchedScheduledInterview.  # noqa: E501

        When the third party's interview was created.  # noqa: E501

        :return: The remote_created_at of this PatchedScheduledInterview.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this PatchedScheduledInterview.

        When the third party's interview was created.  # noqa: E501

        :param remote_created_at: The remote_created_at of this PatchedScheduledInterview.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def remote_updated_at(self):
        """Gets the remote_updated_at of this PatchedScheduledInterview.  # noqa: E501

        When the third party's interview was updated.  # noqa: E501

        :return: The remote_updated_at of this PatchedScheduledInterview.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_updated_at

    @remote_updated_at.setter
    def remote_updated_at(self, remote_updated_at):
        """Sets the remote_updated_at of this PatchedScheduledInterview.

        When the third party's interview was updated.  # noqa: E501

        :param remote_updated_at: The remote_updated_at of this PatchedScheduledInterview.  # noqa: E501
        :type: datetime
        """

        self._remote_updated_at = remote_updated_at

    @property
    def status(self):
        """Gets the status of this PatchedScheduledInterview.  # noqa: E501

        The interview's status.  # noqa: E501

        :return: The status of this PatchedScheduledInterview.  # noqa: E501
        :rtype: ScheduledInterviewStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatchedScheduledInterview.

        The interview's status.  # noqa: E501

        :param status: The status of this PatchedScheduledInterview.  # noqa: E501
        :type: ScheduledInterviewStatusEnum
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedScheduledInterview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedScheduledInterview):
            return True

        return self.to_dict() != other.to_dict()
