# coding: utf-8

"""
    Merge ATS API

    The unified API for building rich integrations with multiple Applicant Tracking System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeATSClient.configuration import Configuration


class PatchedActivity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'user': 'str',
        'remote_created_at': 'datetime',
        'activity_type': 'ActivityTypeEnum',
        'subject': 'str',
        'body': 'str',
        'visibility': 'VisibilityEnum'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'user': 'user',
        'remote_created_at': 'remote_created_at',
        'activity_type': 'activity_type',
        'subject': 'subject',
        'body': 'body',
        'visibility': 'visibility'
    }

    def __init__(self, id=None, remote_id=None, user=None, remote_created_at=None, activity_type=None, subject=None, body=None, visibility=None, local_vars_configuration=None):  # noqa: E501
        """PatchedActivity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._user = None
        self._remote_created_at = None
        self._activity_type = None
        self._subject = None
        self._body = None
        self._visibility = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.user = user
        self.remote_created_at = remote_created_at
        self.activity_type = activity_type
        self.subject = subject
        self.body = body
        self.visibility = visibility

    @property
    def id(self):
        """Gets the id of this PatchedActivity.  # noqa: E501


        :return: The id of this PatchedActivity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchedActivity.


        :param id: The id of this PatchedActivity.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this PatchedActivity.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this PatchedActivity.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PatchedActivity.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this PatchedActivity.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def user(self):
        """Gets the user of this PatchedActivity.  # noqa: E501

        The user the performed the action.  # noqa: E501

        :return: The user of this PatchedActivity.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PatchedActivity.

        The user the performed the action.  # noqa: E501

        :param user: The user of this PatchedActivity.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def remote_created_at(self):
        """Gets the remote_created_at of this PatchedActivity.  # noqa: E501

        When the third party's activity was created.  # noqa: E501

        :return: The remote_created_at of this PatchedActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._remote_created_at

    @remote_created_at.setter
    def remote_created_at(self, remote_created_at):
        """Sets the remote_created_at of this PatchedActivity.

        When the third party's activity was created.  # noqa: E501

        :param remote_created_at: The remote_created_at of this PatchedActivity.  # noqa: E501
        :type: datetime
        """

        self._remote_created_at = remote_created_at

    @property
    def activity_type(self):
        """Gets the activity_type of this PatchedActivity.  # noqa: E501

        The activity's type.  # noqa: E501

        :return: The activity_type of this PatchedActivity.  # noqa: E501
        :rtype: ActivityTypeEnum
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this PatchedActivity.

        The activity's type.  # noqa: E501

        :param activity_type: The activity_type of this PatchedActivity.  # noqa: E501
        :type: ActivityTypeEnum
        """

        self._activity_type = activity_type

    @property
    def subject(self):
        """Gets the subject of this PatchedActivity.  # noqa: E501

        The activity's subject.  # noqa: E501

        :return: The subject of this PatchedActivity.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PatchedActivity.

        The activity's subject.  # noqa: E501

        :param subject: The subject of this PatchedActivity.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this PatchedActivity.  # noqa: E501

        The activity's body.  # noqa: E501

        :return: The body of this PatchedActivity.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PatchedActivity.

        The activity's body.  # noqa: E501

        :param body: The body of this PatchedActivity.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def visibility(self):
        """Gets the visibility of this PatchedActivity.  # noqa: E501

        The activity's visibility.  # noqa: E501

        :return: The visibility of this PatchedActivity.  # noqa: E501
        :rtype: VisibilityEnum
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this PatchedActivity.

        The activity's visibility.  # noqa: E501

        :param visibility: The visibility of this PatchedActivity.  # noqa: E501
        :type: VisibilityEnum
        """

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedActivity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedActivity):
            return True

        return self.to_dict() != other.to_dict()
